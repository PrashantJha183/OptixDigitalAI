// Hero.jsx
import React, { useState, useEffect, useRef } from "react";
import { motion, useAnimation, useInView } from "framer-motion";
import ErrorBoundary from "../base/ErrorBoundary";
import { FiArrowRight } from "react-icons/fi";
import hook from "../../assets/Optix Hero Section.svg";

const Hero = () => {
  const [loaded, setLoaded] = useState(false);
  const controls = useAnimation();
  const sectionRef = useRef(null);

  // Simulate small loading delay for skeleton
  useEffect(() => {
    const timer = setTimeout(() => setLoaded(true), 300);
    return () => clearTimeout(timer);
  }, []);

  // Scroll-based animation trigger
  useEffect(() => {
    if (!loaded || !sectionRef.current) return;

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) controls.start("visible");
        else controls.start("hidden");
      },
      { threshold: 0.3 }
    );

    observer.observe(sectionRef.current);
    return () => observer.disconnect();
  }, [loaded, controls]);

  // Smooth fade & motion variants
  const fadeVariant = {
    hidden: { opacity: 0, y: 60, scale: 0.98 },
    visible: (i = 1) => ({
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        delay: i * 0.25,
        duration: 0.8,
        ease: [0.25, 0.1, 0.25, 1],
      },
    }),
  };

  if (!loaded)
    return (
      <div className="bg-[#5d00c3] text-white min-h-[70vh] flex justify-center items-center rounded-md m-4 px-4 md:px-8 animate-pulse" />
    );

  return (
    <ErrorBoundary>
      <section
        ref={sectionRef}
        className="bg-[#5d00c3] text-white md:pt-52 md:pb-24 flex flex-col md:flex-row justify-center md:justify-between items-center px-6 md:px-40 py-32 md:py-10 rounded-md m-4 overflow-hidden new-font relative"
        role="banner"
      >
        {/* Decorative floating gradient orbs */}
        <motion.div
          className="absolute top-10 left-10 w-40 h-40 bg-purple-500/30 rounded-full blur-3xl"
          animate={{ y: [0, -15, 0], opacity: [0.8, 1, 0.8] }}
          transition={{ duration: 6, repeat: Infinity, ease: "easeInOut" }}
        />
        <motion.div
          className="absolute bottom-10 right-10 w-48 h-48 bg-yellow-400/20 rounded-full blur-3xl"
          animate={{ y: [0, 20, 0], opacity: [0.7, 1, 0.7] }}
          transition={{ duration: 7, repeat: Infinity, ease: "easeInOut" }}
        />

        {/* LEFT CONTENT */}
        <motion.div
          className="flex flex-col justify-center items-center md:items-start text-center md:text-left md:w-1/2 space-y-6 md:space-y-5 z-10"
          initial="hidden"
          animate={controls}
          variants={fadeVariant}
          custom={1}
        >
          <motion.h1
            className="text-lg md:text-3xl leading-tight"
            tabIndex={0}
            variants={fadeVariant}
            custom={1}
          >
            Welcome to OptixDigitalAI
          </motion.h1>

          <motion.p
            className="text-4xl md:text-6xl text-gray-100 max-w-5xl font-extrabold"
            tabIndex={0}
            variants={fadeVariant}
            custom={2}
          >
            Transforming Ideas Into
            <span className="text-yellow-400"> Digital World</span>
          </motion.p>

          <motion.p
            className="text-md md:text-xl text-gray-100 max-w-5xl"
            tabIndex={0}
            variants={fadeVariant}
            custom={2}
          >
            Crafting intuitive designs that captivate and inspire. Building
            dynamic websites that define your digital identity. Empowering
            brands with intelligent, future-ready solutions.
          </motion.p>

          <motion.button
            className="mt-4 bg-transparent text-white font-semibold px-6 py-3 rounded-md border-2 border-white hover:bg-white hover:text-[#5d00c3] transition-all duration-300 inline-flex items-center space-x-3"
            aria-label="Get Started with OptixDigitalAI"
            variants={fadeVariant}
            custom={3}
            whileHover={{
              scale: 1.08,
              x: 6,
              boxShadow: "0px 0px 20px rgba(255,255,255,0.4)",
            }}
            whileTap={{ scale: 0.95 }}
          >
            <span>Get Started</span>
            <FiArrowRight className="w-6 h-6 md:w-7 md:h-7 transition-transform group-hover:translate-x-2" />
          </motion.button>
        </motion.div>

        {/* RIGHT IMAGE */}
        <motion.div
          className="mt-10 md:mt-0 md:w-1/2 flex justify-center items-center z-10"
          initial={{ opacity: 0, x: 0 }}
          animate={controls}
          variants={fadeVariant}
          custom={4}
        >
          <motion.img
            src={hook}
            alt="Creative agency illustration - OptixDigitalAI"
            loading="lazy"
            className="w-64 md:w-80 lg:w-96 drop-shadow-2xl rounded-lg object-contain mx-auto transition-transform duration-700 ease-in-out"
            whileHover={{
              scale: 1.1,
              rotate: 1.5,
              transition: { type: "spring", stiffness: 200, damping: 12 },
            }}
            animate={{
              y: [0, -10, 0],
              rotate: [0, 1, 0],
            }}
            transition={{
              duration: 6,
              repeat: Infinity,
              ease: "easeInOut",
            }}
          />
        </motion.div>
      </section>
    </ErrorBoundary>
  );
};

export default Hero;















witout blur effect

import React, { useState, useEffect, useRef } from "react";
import { motion, useAnimation } from "framer-motion";
import {
  FaBolt,
  FaUserShield,
  FaCheckCircle,
  FaThumbsUp,
} from "react-icons/fa";
import { FiPhone } from "react-icons/fi";
import chooseImg from "../../assets/Choose.png";
import { Link } from "react-router-dom";
import Optix from "../../assets/Optix Low Opacity Logo.svg";

const points = [
  {
    icon: <FaBolt className="text-yellow-400 text-4xl mb-3" />,
    title: "Lightning Fast Delivery",
    desc: "Experience ultra-fast performance and rapid project deployment designed to accelerate your business growth.",
  },
  {
    icon: <FaUserShield className="text-blue-400 text-4xl mb-3" />,
    title: "Secure & Reliable",
    desc: "Your data is protected with enterprise-grade security and round-the-clock reliability you can trust.",
  },
  {
    icon: <FaCheckCircle className="text-green-400 text-4xl mb-3" />,
    title: "Trusted Expertise",
    desc: "Our skilled professionals deliver creative, high-quality solutions tailored to your unique needs.",
  },
  {
    icon: <FaThumbsUp className="text-pink-400 text-4xl mb-3" />,
    title: "Client Satisfaction",
    desc: "We go the extra mile to ensure every client leaves not just satisfied, but impressed.",
  },
];

const Choose = () => {
  const [isMobile, setIsMobile] = useState(false);
  const buttonControls = useAnimation();
  const buttonRef = useRef(null);

  // Detect screen size
  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // Animate button when in view
  useEffect(() => {
    if (!buttonRef.current) return;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          buttonControls.start("visible");
        } else {
          buttonControls.start("hidden");
        }
      },
      { threshold: 0.3 }
    );

    observer.observe(buttonRef.current);
    return () => observer.unobserve(buttonRef.current);
  }, [buttonControls]);

  const getItemVariants = (index) => {
    if (isMobile) {
      return {
        hidden: { opacity: 0, y: 60 },
        visible: {
          opacity: 1,
          y: 0,
          transition: {
            delay: index * 0.1,
            type: "spring",
            stiffness: 250,
            damping: 18,
            mass: 0.7,
          },
        },
        hover: {
          scale: 1.05,
          transition: { type: "spring", stiffness: 250, damping: 16 },
        },
      };
    }

    return {
      hidden: { opacity: 0, y: 40 },
      visible: {
        opacity: 1,
        y: 0,
        transition: { duration: 0.7, ease: "easeOut", delay: index * 0.2 },
      },
      hover: {
        scale: 1.05,
        transition: { type: "spring", stiffness: 220, damping: 14 },
      },
    };
  };

  const buttonVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 120,
        duration: 0.6,
      },
    },
  };

  return (
    <section className="pb-10 new-font m-4 md:mt-0 md:pt-20 md:pb-12 rounded-md flex flex-col md:flex-row justify-center items-center md:gap-6 lg:gap-8 text-center md:text-left px-4 md:px-12 bg-[#5d00c3] text-white overflow-hidden relative">
      {/* Optix Watermark Top Left */}
      <motion.img
        src={Optix}
        alt="Optix Logo"
        className="absolute top-10 left-4 md:w-96 pointer-events-none select-none hidden md:block"
      />

      {/* Optix Watermark Bottom Left */}
      {/* <motion.img
        src={Optix}
        alt="Optix Logo"
        className="absolute bottom-0 right-[-40px] w-32 md:w-64  pointer-events-none select-none"
      /> */}

      {/* Left Image */}
      <motion.div
        className="flex-1 flex justify-center items-center"
        initial={{ x: -80, opacity: 0 }}
        whileInView={{ x: 0, opacity: 1 }}
        transition={{ duration: 0.8, ease: "easeOut" }}
        viewport={{ once: false, amount: 0.3 }}
      >
        <motion.img
          src={chooseImg}
          alt="Why Choose Us"
          className="w-90 pt-10 md:pt-0 md:w-[500px] lg:w-[500px] duration-500"
        />
      </motion.div>

      {/* Right Text */}
      <div className="flex-1 flex flex-col justify-center items-center md:items-start max-w-full">
        <motion.h2
          initial={{ opacity: 0, y: -40 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.7 }}
          viewport={{ once: false }}
          className="text-lg md:text-2xl border-2 rounded-full px-6 py-3 mt-6 md:mt-0 font-bold mb-6 text-white"
        >
          Why Choose Us
        </motion.h2>

        {/* Points Grid */}
        <div className="w-full grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
          {points.map((point, i) => (
            <motion.div
              key={i}
              initial="hidden"
              whileInView="visible"
              viewport={{ once: false, amount: 0.3 }}
              variants={getItemVariants(i)}
              whileHover="hover"
              className="flex flex-col items-center md:items-start p-5 transition-all duration-300 md:bg-white text-[#5d00c3] md:rounded-xl md:shadow-lg md:hover:shadow-xl"
            >
              {point.icon}
              <h3 className="text-lg md:text-xl font-semibold mb-1">
                {point.title}
              </h3>
              <p className="text-gray-200 md:text-gray-900 text-sm md:text-base leading-relaxed">
                {point.desc}
              </p>
            </motion.div>
          ))}
        </div>

        {/* Request a Call Button */}
        <Link to="/contact">
          <motion.button
            ref={buttonRef}
            variants={buttonVariants}
            initial="hidden"
            animate={buttonControls}
            whileHover={{ scale: 1.05 }}
            className="flex items-center gap-2 bg-yellow-400 text-black font-semibold px-6 py-3 rounded-md mt-10 md:mt-6 shadow-lg hover:shadow-xl transition-all duration-300"
          >
            <FiPhone className="text-xl" />
            Request a Call
          </motion.button>
        </Link>
      </div>

      {/* Background Glow */}
      <motion.div
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 0.35 }}
        transition={{ duration: 2 }}
        viewport={{ once: false }}
        className="absolute w-[500px] h-[500px] bg-purple-500/40 rounded-full blur-[180px] -z-10 bottom-0 left-1/2 -translate-x-1/2"
      />
    </section>
  );
};

export default Choose;

wihotut blur effect
// Hero.jsx
import React, { useState, useEffect, useRef } from "react";
import { motion, useAnimation, useInView } from "framer-motion";
import ErrorBoundary from "../base/ErrorBoundary";
import { FiArrowRight } from "react-icons/fi";
import hook from "../../assets/Optix Hero Section.svg";

const Hero = () => {
  const [loaded, setLoaded] = useState(false);
  const controls = useAnimation();
  const sectionRef = useRef(null);

  // Simulate small loading delay for skeleton
  useEffect(() => {
    const timer = setTimeout(() => setLoaded(true), 300);
    return () => clearTimeout(timer);
  }, []);

  // Scroll-based animation trigger
  useEffect(() => {
    if (!loaded || !sectionRef.current) return;

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) controls.start("visible");
        else controls.start("hidden");
      },
      { threshold: 0.3 }
    );

    observer.observe(sectionRef.current);
    return () => observer.disconnect();
  }, [loaded, controls]);

  // Smooth fade & motion variants
  const fadeVariant = {
    hidden: { opacity: 0, y: 60, scale: 0.98 },
    visible: (i = 1) => ({
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        delay: i * 0.25,
        duration: 0.8,
        ease: [0.25, 0.1, 0.25, 1],
      },
    }),
  };

  if (!loaded)
    return (
      <div className="bg-[#5d00c3] text-white min-h-[70vh] flex justify-center items-center rounded-md m-4 px-4 md:px-8 animate-pulse" />
    );

  return (
    <ErrorBoundary>
      <section
        ref={sectionRef}
        className="bg-[#5d00c3] text-white md:pt-52 md:pb-24 flex flex-col md:flex-row justify-center md:justify-between items-center px-6 md:px-40 py-32 md:py-10 rounded-md m-4 overflow-hidden new-font relative"
        role="banner"
      >
        {/* Decorative floating gradient orbs */}
        <motion.div
          className="absolute top-10 left-10 w-40 h-40 bg-purple-500/30 rounded-full blur-3xl"
          animate={{ y: [0, -15, 0], opacity: [0.8, 1, 0.8] }}
          transition={{ duration: 6, repeat: Infinity, ease: "easeInOut" }}
        />
        <motion.div
          className="absolute bottom-10 right-10 w-48 h-48 bg-yellow-400/20 rounded-full blur-3xl"
          animate={{ y: [0, 20, 0], opacity: [0.7, 1, 0.7] }}
          transition={{ duration: 7, repeat: Infinity, ease: "easeInOut" }}
        />

        {/* LEFT CONTENT */}
        <motion.div
          className="flex flex-col justify-center items-center md:items-start text-center md:text-left md:w-1/2 space-y-6 md:space-y-5 z-10"
          initial="hidden"
          animate={controls}
          variants={fadeVariant}
          custom={1}
        >
          <motion.h1
            className="text-lg md:text-3xl leading-tight"
            tabIndex={0}
            variants={fadeVariant}
            custom={1}
          >
            Welcome to OptixDigitalAI
          </motion.h1>

          <motion.p
            className="text-4xl md:text-6xl text-gray-100 max-w-5xl font-extrabold"
            tabIndex={0}
            variants={fadeVariant}
            custom={2}
          >
            Transforming Ideas Into
            <span className="text-yellow-400"> Digital World</span>
          </motion.p>

          <motion.p
            className="text-md md:text-xl text-gray-100 max-w-5xl"
            tabIndex={0}
            variants={fadeVariant}
            custom={2}
          >
            Crafting intuitive designs that captivate and inspire. Building
            dynamic websites that define your digital identity. Empowering
            brands with intelligent, future-ready solutions.
          </motion.p>

          <motion.button
            className="mt-4 bg-transparent text-white font-semibold px-6 py-3 rounded-md border-2 border-white hover:bg-white hover:text-[#5d00c3] transition-all duration-300 inline-flex items-center space-x-3"
            aria-label="Get Started with OptixDigitalAI"
            variants={fadeVariant}
            custom={3}
            whileHover={{
              scale: 1.08,
              x: 6,
              boxShadow: "0px 0px 20px rgba(255,255,255,0.4)",
            }}
            whileTap={{ scale: 0.95 }}
          >
            <span>Get Started</span>
            <FiArrowRight className="w-6 h-6 md:w-7 md:h-7 transition-transform group-hover:translate-x-2" />
          </motion.button>
        </motion.div>

        {/* RIGHT IMAGE */}
        <motion.div
          className="mt-10 md:mt-0 md:w-1/2 flex justify-center items-center z-10"
          initial={{ opacity: 0, x: 0 }}
          animate={controls}
          variants={fadeVariant}
          custom={4}
        >
          <motion.img
            src={hook}
            alt="Creative agency illustration - OptixDigitalAI"
            loading="lazy"
            className="w-64 md:w-80 lg:w-96 drop-shadow-2xl rounded-lg object-contain mx-auto transition-transform duration-700 ease-in-out"
            whileHover={{
              scale: 1.1,
              rotate: 1.5,
              transition: { type: "spring", stiffness: 200, damping: 12 },
            }}
            animate={{
              y: [0, -10, 0],
              rotate: [0, 1, 0],
            }}
            transition={{
              duration: 6,
              repeat: Infinity,
              ease: "easeInOut",
            }}
          />
        </motion.div>
      </section>
    </ErrorBoundary>
  );
};

export default Hero;



Contact.jsx

import React, { useState, useEffect, useRef, useCallback } from "react";
import { motion, useAnimation } from "framer-motion";
import ErrorBoundary from "../base/ErrorBoundary";
import {
  FiMail,
  FiUser,
  FiMessageSquare,
  FiSend,
  FiPhone,
} from "react-icons/fi";
import { debounce } from "lodash";

const Contact = () => {
  const controls = useAnimation();
  const sectionRef = useRef(null);

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    message: "",
  });

  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  const [status, setStatus] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isFormValid, setIsFormValid] = useState(false);

  // Scroll-trigger animation
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) =>
        entry.isIntersecting
          ? controls.start("visible")
          : controls.start("hidden"),
      { threshold: 0.3 }
    );
    if (sectionRef.current) observer.observe(sectionRef.current);
    return () => observer.disconnect();
  }, [controls]);

  // Validation logic
  const validate = useCallback(() => {
    const newErrors = {};
    if (!formData.name.trim()) newErrors.name = "Name is required.";
    if (!formData.email.trim()) newErrors.email = "Email is required.";
    else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email))
      newErrors.email = "Enter a valid email address.";

    if (!formData.phone.trim()) newErrors.phone = "Phone number is required.";
    else if (!/^\+?\d{10,15}$/.test(formData.phone))
      newErrors.phone = "Enter a valid phone number (10-15 digits).";

    if (!formData.message.trim())
      newErrors.message = "Message cannot be empty.";

    setErrors(newErrors);
    setIsFormValid(Object.keys(newErrors).length === 0);
    return Object.keys(newErrors).length === 0;
  }, [formData]);

  // Debounced input update
  const handleInputChange = useCallback(
    debounce((field, value) => {
      setFormData((prev) => ({ ...prev, [field]: value }));
    }, 250),
    []
  );

  // Real-time validation when user types
  useEffect(() => {
    validate();
  }, [formData, validate]);

  const handleBlur = (field) => {
    setTouched((prev) => ({ ...prev, [field]: true }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setTouched({ name: true, email: true, phone: true, message: true });

    if (!validate()) {
      setStatus("error");
      controls.start({
        x: [-10, 10, -10, 10, 0],
        transition: { duration: 0.4 },
      });
      return;
    }

    setIsSubmitting(true);
    setStatus(null);

    setTimeout(() => {
      setIsSubmitting(false);
      setStatus("success");
      setFormData({ name: "", email: "", phone: "", message: "" });
      setTouched({});
      setIsFormValid(false);
    }, 1500);
  };

  const fadeVariant = {
    hidden: { opacity: 0, y: 60 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.8, ease: "easeOut" },
    },
  };

  return (
    <ErrorBoundary>
      <section
        ref={sectionRef}
        id="contact"
        className="bg-[#5d00c3] text-white min-h-[85vh] flex flex-col md:flex-row justify-center items-center px-6 md:px-20 py-24 rounded-md m-4 overflow-hidden relative"
      >
        {/* Decorative gradients */}
        <motion.div
          className="absolute top-10 left-10 w-40 h-40 bg-purple-400/30 rounded-full blur-3xl"
          animate={{ y: [0, -15, 0], opacity: [0.8, 1, 0.8] }}
          transition={{ duration: 6, repeat: Infinity, ease: "easeInOut" }}
        />
        <motion.div
          className="absolute bottom-10 right-10 w-48 h-48 bg-yellow-300/20 rounded-full blur-3xl"
          animate={{ y: [0, 20, 0], opacity: [0.7, 1, 0.7] }}
          transition={{ duration: 7, repeat: Infinity, ease: "easeInOut" }}
        />

        {/* LEFT SIDE - TEXT */}
        <motion.div
          className="md:w-1/2 z-10 text-center md:text-left mb-10 md:mb-0"
          initial="hidden"
          animate={controls}
          variants={fadeVariant}
        >
          <h2 className="text-2xl md:text-5xl font-bold leading-tight mb-6">
            Let’s Build Something <br />
            <span className="text-yellow-400">Extraordinary Together</span>
          </h2>
          <p className="text-gray-200 text-md max-w-lg mx-auto md:mx-0">
            Have a project in mind or just want to say hello? We’d love to
            collaborate and help bring your ideas to life.
          </p>
        </motion.div>

        {/* RIGHT SIDE - FORM */}
        <motion.div
          className="md:w-1/2 z-10 w-full max-w-lg"
          initial="hidden"
          animate={controls}
          variants={fadeVariant}
        >
          <form
            onSubmit={handleSubmit}
            className="space-y-5 bg-white p-8 rounded-2xl shadow-xl border border-gray-200"
            noValidate
          >
            {/* Name */}
            <div className="relative">
              <FiUser className="absolute left-4 top-4 text-gray-500" />
              <input
                type="text"
                placeholder="Your Name"
                value={formData.name}
                onChange={(e) => handleInputChange("name", e.target.value)}
                onBlur={() => handleBlur("name")}
                className={`w-full pl-12 pr-4 py-3 border-2 rounded-md text-gray-800 placeholder-gray-500 focus:outline-none ${
                  touched.name && errors.name
                    ? "border-red-400"
                    : "border-gray-300 focus:border-[#5d00c3]"
                } transition-all`}
              />
              {touched.name && errors.name && (
                <p className="text-red-500 text-sm mt-1">{errors.name}</p>
              )}
            </div>

            {/* Email */}
            <div className="relative">
              <FiMail className="absolute left-4 top-4 text-gray-500" />
              <input
                type="email"
                placeholder="Your Email"
                value={formData.email}
                onChange={(e) => handleInputChange("email", e.target.value)}
                onBlur={() => handleBlur("email")}
                className={`w-full pl-12 pr-4 py-3 border-2 rounded-md text-gray-800 placeholder-gray-500 focus:outline-none ${
                  touched.email && errors.email
                    ? "border-red-400"
                    : "border-gray-300 focus:border-[#5d00c3]"
                } transition-all`}
              />
              {touched.email && errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email}</p>
              )}
            </div>

            {/* Phone */}
            <div className="relative">
              <FiPhone className="absolute left-4 top-4 text-gray-500" />
              <input
                type="tel"
                placeholder="Your Phone Number"
                value={formData.phone}
                onChange={(e) => handleInputChange("phone", e.target.value)}
                onBlur={() => handleBlur("phone")}
                className={`w-full pl-12 pr-4 py-3 border-2 rounded-md text-gray-800 placeholder-gray-500 focus:outline-none ${
                  touched.phone && errors.phone
                    ? "border-red-400"
                    : "border-gray-300 focus:border-[#5d00c3]"
                } transition-all`}
              />
              {touched.phone && errors.phone && (
                <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
              )}
            </div>

            {/* Message */}
            <div className="relative">
              <FiMessageSquare className="absolute left-4 top-4 text-gray-500" />
              <textarea
                placeholder="Your Message"
                rows={4}
                value={formData.message}
                onChange={(e) => handleInputChange("message", e.target.value)}
                onBlur={() => handleBlur("message")}
                className={`w-full pl-12 pr-4 py-3 border-2 rounded-md text-gray-800 placeholder-gray-500 resize-none focus:outline-none ${
                  touched.message && errors.message
                    ? "border-red-400"
                    : "border-gray-300 focus:border-[#5d00c3]"
                } transition-all`}
              />
              {touched.message && errors.message && (
                <p className="text-red-500 text-sm mt-1">{errors.message}</p>
              )}
            </div>

            {/* Submit Button */}
            <motion.button
              type="submit"
              disabled={!isFormValid || isSubmitting}
              className={`w-full py-3 flex justify-center items-center gap-2 text-lg font-semibold rounded-md transition-all duration-300 ${
                !isFormValid || isSubmitting
                  ? "bg-gray-400 text-white cursor-not-allowed"
                  : "bg-[#5d00c3] text-white hover:bg-[#6a00e8]"
              }`}
              whileHover={isFormValid && !isSubmitting ? { scale: 1.05 } : {}}
              whileTap={{ scale: 0.97 }}
            >
              {isSubmitting ? "Sending..." : "Send Message"}
              <FiSend className="w-5 h-5" />
            </motion.button>

            {/* Status Messages */}
            {status === "success" && (
              <motion.p
                className="text-green-600 text-center font-semibold mt-2"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                Message sent successfully!
              </motion.p>
            )}
            {status === "error" && (
              <motion.p
                className="text-red-600 text-center font-semibold mt-2"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                Please correct the errors above.
              </motion.p>
            )}
          </form>
        </motion.div>
      </section>
    </ErrorBoundary>
  );
};

export default Contact;

